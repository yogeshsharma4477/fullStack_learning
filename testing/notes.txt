1. npm install --save-dev @testing-library/react
2. npm i -D jest
3. configure jest -> npx jest --init // this will create a jest.config file
                    choose jsdom, babel
                  -> npm i jest-environment-jsdom
4. now setup your test commands -> npm run test 
                                  // to test but now we don't have any test file yet
                                  // jest try to find test file inside __tests__ folder
5. now create test file folder > /component/__tests__/sum.test.js // there is convention to write test file i.e name.test.js

6. configure babel so that our test file understand our import because our normal js file does not understand import
   -> npm install --save-dev babel-jest @babel/core @babel/preset-env
    then configure by creating babel.config.js
    module.exports = {
      presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
    };
    expext and toBe
7. gitignore jest - jest create a coverage folder which keeps track of all the coverage that jest has covered and shows in the CLI
   we want that coverage folder in our local only so add coverage folder in git ignore



// babel.config.js
module.exports = {
    presets: [
      [
        '@babel/preset-env',
        {
          targets: {
            node: 'current',
          },
        },
      ],
      '@babel/preset-react', // added so that jest can understand jsx, babel convert this into a way jest understand
    ],
  };
  or 
  experimental: {
      forceSwcTransforms: true, // Ensure SWC transforms are enabled
  },



Q. where does our jest run our code? is it run on browser?
> NO it runs on a different environment which jest created for us. its not rendering on the browser 
  that is why jest did not understood import { sum } from '../sum' and that is why we took help of babel
  babel helps jest understand our js code