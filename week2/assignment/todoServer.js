/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos

  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123

  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }

  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */


  const express = require("express");
  const fs = require('fs')
  const app = express();
  const path = require('path')
  const body_parser = require('body-parser')
  const { v4: uuidv4 } = require('uuid');
  const cors = require('cors')
  app.use(body_parser.json())
  app.use(cors())

  app.post('/todos',(req,res)=>{
    try {
      const { title, completed, description} = req.body;
      fs.readFile(`${__dirname}/todo.json`,"utf8",(err,data) => {
        if(err){
          console.log(err,"err");
          return
        }
        let fileData = JSON.parse(data)
        let userTodo = { "uid": uuidv4(), "title": title, "completed": completed, description: description }
        fileData.push(userTodo)
        fs.writeFile(`${__dirname}/todo.json`,JSON.stringify(fileData),(err)=>{
          if(err){
            console.log(err);
            return res.status(400).send({success:"false",message:err})
          }
        })
        return res.status(200).send({success:"true",message:"done",todo:userTodo})
      })
    } catch (error) {
      return res.status(400).send({success:"false",message:error})
    }
  })

  app.get('/todos',(req,res) => {
    try {
      fs.readFile(`${__dirname}/todo.json`,"utf8",(err,data) => {
        if(err){
          console.log(err,"err");
          return res.status(400).send({success:"false",message:err})
        }
        return res.status(201).send({success:true, message:"success", todo : JSON.parse(data)})
      })
    } catch (error) {
      return res.status(400).send({success:"false",message:error})
    }
  })

  app.get('/todos/:id',(req,res) => {
    try {
      const id = req.params.id || ''
      fs.readFile(`${__dirname}/todo.json`,"utf8",(err,data) => {
        if(err){
          console.log(err,"err");
          return res.status(400).send({success:"false",message:err})
        }
        let result = {}
        let todoList = JSON.parse(data)
        for(let i = 0; i < todoList.length; i++){
          if(todoList[i].uid === id){
            result = todoList[i]
            break
          }
        }
        return res.status(201).send({success:true, message:"success", todo : result})
      })
    } catch (error) {
      return res.status(400).send({success:"false",message:error})
    }
  })

  app.put('/todos/:id',(req,res) => {
    try {
      const id = req.params.id || ''
      fs.readFile(`${__dirname}/todo.json`,"utf8",(err,data) => {
        if(err){
          console.log(err,"err");
          return res.status(400).send({success:"false",message:err})
        }
        let result = {}
        let todo = JSON.parse(data)
        for(let i=0;i<todo.length;i++){
          if(todo[i].uid === id){
              for(let [key,value] of Object.entries(req.body)){
                  if(todo[i][key] || typeof todo[i][key] == "boolean"){
                      todo[i][key] = value
                  }
              }
          }
      }

      fs.writeFile(`${__dirname}/todo.json`,JSON.stringify(todo),(err)=>{
        if(err){
          console.log(err);
          return res.status(400).send({success:"true",message:err})
        }
      })

      return res.status(201).send({success:true, message:"success"})
      })
    } catch (error) {
      return res.status(400).send({success:"false",message:error})
    }
  })

  app.delete('/todos/:id',(req,res)=>{
    try {
      let id = req.params.id
      if(!id)return res.status(404).send({success:"false",message:"id not found"})
      fs.readFile(`${__dirname}/todo.json`, 'utf-8', (err, data) => {
        if(err){
          return res.status(400).send({success:"false",message:err})
        }
        let todoList = JSON.parse(data);
        for (let i = 0; i < todoList.length; i++) {
          if(todoList[i].uid === id){
            todoList.splice(i,1)
          }
        }
        fs.writeFile(`${__dirname}/todo.json`,JSON.stringify(todoList),(err)=>{
          if(err){
            return res.status(400).send({success:"false",message:err})
          }
          return res.status(200).send({success:"true",message:"todo deleted successfully"})
        })
      })
    } catch (error) {
      return res.status(400).send({success:"false",message:error})
    }
  })

  app.listen(3000,()=>{
    console.log("server running of port 3000 for todo");
  })